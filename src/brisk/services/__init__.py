"""Global service management."""
from typing import Dict, Optional
import pathlib

import numpy as np

from brisk.services import bundle, logging, metadata, io, utility, reporting
from brisk.configuration import algorithm_wrapper
from brisk.evaluation import metric_manager

class GlobalServiceManager:
    """A singleton that makes services available to the entire Brisk package.
    
    Services provide a common interface for all classes to use for logging,
    metadata, I/O, and reporting. It also provides a way to access data as it is
    generated by the package to be used in the report.

    Parameters
    ----------
    algorithm_config (AlgorithmCollection): 
        The algorithm configuration.
    metric_config (MetricManager): 
        The metric configuration.
    results_dir (Path):
        The root directory for the results.
    verbose (bool):
        Whether to use verbose logging.

    Attributes
    ----------
    services (Dict[str, Service]): 
        A dictionary of services.

    Returns
    -------
    None
    """
    instance: Optional["GlobalServiceManager"] = None
    is_initalized: bool = False

    def __new__(cls, *args, **kwargs):
        if cls.instance is None:
            cls.instance = super(GlobalServiceManager, cls).__new__(cls)
        return cls.instance

    def __init__(
        self,
        algorithm_config: algorithm_wrapper.AlgorithmCollection,
        metric_config: metric_manager.MetricManager,
        results_dir: pathlib.Path,
        verbose: bool = False
    ) -> None:
        if self.is_initalized:
            return

        self.services = {}
        self.services["logging"] = logging.LoggingService(
            "logging", None, verbose
        )
        self.services["metadata"] = metadata.MetadataService(
            "metadata", algorithm_config
        )
        self.services["io"] = io.IOService("io", results_dir, None)
        self.services["utility"] = utility.UtilityService(
            "utility", algorithm_config, None, None
        )
        self.services["reporting"] = reporting.ReportingService(
            "reporting", metric_config
        )
        self._register_services()
        self.is_initalized = True

    def _register_services(self) -> None:
        """Register all services so they can access each other.

        Returns
        -------
        None
        """
        for key, service in self.services.items():
            if hasattr(service, "register_services"):
                other_services = self.services.copy()
                other_services.pop(key)
                service.register_services(other_services)

    def get_service_bundle(self) -> bundle.ServiceBundle:
        """Get the service bundle.

        Returns
        -------
        ServiceBundle: 
            The service bundle.
        """
        return bundle.ServiceBundle(
            logger=self.services["logging"],
            metadata=self.services["metadata"],
            io=self.services["io"],
            utility=self.services["utility"],
            reporting=self.services["reporting"]
        )

    def update_utility_config(
        self,
        group_index_train=None,
        group_index_test=None,
    ) -> None:
        """Update utility service configuration.

        Parameters
        ----------
        group_index_train (Dict[str, np.array]): 
            The training group indices.
        group_index_test (Dict[str, np.array]): 
            The test group indices.

        Returns
        -------
        None
        """
        if self.services["utility"]:
            utility_service = self.services["utility"]
            if group_index_train is not None and group_index_test is not None:
                utility_service.set_split_indices(
                    group_index_train, group_index_test
                )

    @classmethod
    def reset(cls) -> None:
        """Reset the singleton instance for testing or cleanup.
        
        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        cls.is_initalized = None
        cls.is_initalized = False


def initialize_services(
    algorithm_config: algorithm_wrapper.AlgorithmCollection,
    metric_config: metric_manager.MetricManager,
    results_dir: pathlib.Path,
    verbose: bool = False
) -> None:
    """Initialize the global service manager.

    Parameters
    ----------
    algorithm_config (AlgorithmCollection): 
        The algorithm configuration.
    metric_config (MetricManager): 
        The metric configuration.
    results_dir (Path): 
        The root directory for the results.
    verbose (bool): 
        Whether to use verbose logging.

    Returns
    -------
    None
    """
    GlobalServiceManager(
        algorithm_config=algorithm_config,
        metric_config=metric_config,
        results_dir=results_dir,
        verbose=verbose
    )

def get_services() -> bundle.ServiceBundle:
    """Get global ServiceBundle instance.

    Returns
    -------
    ServiceBundle: 
        The service bundle.
    """
    if GlobalServiceManager.instance is not None:
        return GlobalServiceManager.instance.get_service_bundle()

    raise RuntimeError(
        "Services not initalized. Call initalize_services() first."
    )


def get_service_manager() -> GlobalServiceManager:
    """Get the global service manager.

    Returns
    -------
    GlobalServiceManager: 
        The global service manager.
    """
    if GlobalServiceManager.instance is None:
        raise RuntimeError(
            "Services not initialized. Call initialize_services() first."
        )
    return GlobalServiceManager.instance


def is_initialized() -> bool:
    """Check if services are initialized.

    Returns
    -------
    bool: 
        True if services are initialized, False otherwise.
    """
    return GlobalServiceManager.instance is not None


def update_experiment_config(
    output_dir: str,
    group_index_train: Dict[str, np.array],
    group_index_test: Dict[str, np.array]
) -> None:
    """Update service configurations for a new experiment.

    Parameters
    ----------
    output_dir (str): 
        The output directory for the experiment.
    group_index_train (Dict[str, np.array]): 
        The training group indices.
    group_index_test (Dict[str, np.array]): 
        The test group indices.

    Returns
    -------
    None
    """
    if GlobalServiceManager.instance is None:
        raise RuntimeError(
            "Services not initialized. Call initialize_services() first."
        )

    GlobalServiceManager.instance.services["io"].set_output_dir(
        pathlib.Path(output_dir)
    )

    GlobalServiceManager.instance.update_utility_config(
        group_index_train=group_index_train,
        group_index_test=group_index_test
    )
