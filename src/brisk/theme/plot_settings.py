"""Class that allows users to customize the plots generated by Brisk.

The file IO settings such as image type, size, dpi, etc. will apply to all
plots saved using the IOService.

Values related to the styling of plots will only apply to the builtin plots by
default, but users will have the option to apply the theme to custom plotnine
plots.
"""
from typing import Optional

import plotnine as pn

from brisk.theme.theme import brisk_theme

class PlotSettings:
    """Control the styling and file I/O settings for plots.

    This class provides centralized way to control:
    1. File output settings (format, size, dpi, etc.)
    2. Plot styling using plotnine theme objects

    The plot styling settings apply to built-in plots automatically and to
    custom plotnine plots via ther create_theme() method.    
    """
    VALID_FORMATS = {"png", "jpg", "jpeg", "svg", "pdf"}

    def __init__(
        self,
        theme: Optional[pn.theme] = None,
        override: bool = False,
        format: str = "png",
        width: int = 10,
        height: int = 8,
        dpi: int = 300,
        transparent: bool = False,
        primary_color: str = None,
        secondary_color: str = None,
        accent_color: str = None
    ):
        """Initialize PlotSettings with custom parameters.
        
        Arguments
        ---------
        theme: A plotnine theme object. If None, uses the default brisk theme.
                Can be any plotnine theme such as:
                - Built-in themes: theme_minimal(), theme_classic(), etc.
                - Custom themes: your_custom_theme()
                - Combined themes: theme_minimal() + theme(text=element_text(...))
        override: bool, 
            if True, override the default theme with the provided theme.
            If False, extend the default theme with the provided theme.
        format: str, file format ('png', 'pdf', etc.)
        width: float, figure width in inches
        height: float, figure height in inches
        dpi: int, resolution in dots per inch
        transparent: bool, transparent background
        primary_color: str, primary color
        secondary_color: str, secondary color
        accent_color: str, accent color
        """
        self.file_io_settings = {}
        self._update_io_settings(
            format, width, height, dpi, transparent
        )

        self.primary_color = primary_color or "#1175D5"
        self.secondary_color = secondary_color or "#00A878"
        self.accent_color = accent_color or "#DE6B48"

        if theme is not None:
            self._validate_theme(theme)
            if override:
                self.theme = theme
            else:
                self.theme = brisk_theme() + theme
        else:
            self.theme = brisk_theme()

    def _update_io_settings(
        self,
        file_format: str,
        width: int,
        height: int,
        dpi: int,
        transparent: bool
    ):
        """Collect all values to pass to IOService, set defaults if missing"""
        self.file_io_settings["format"] = file_format
        self.file_io_settings["width"] = width
        self.file_io_settings["height"] = height
        self.file_io_settings["dpi"] = dpi
        self.file_io_settings["transparent"] = transparent
        if self.file_io_settings["format"] not in self.VALID_FORMATS:
            raise ValueError(
                f"Invalid file format: {self.file_io_settings['format']}. "
                f"Valid formats are: {', '.join(self.VALID_FORMATS)}"
            )

    def _validate_theme(self, theme: pn.theme) -> None:
        """Validate that the provided theme is a plotnine theme object."""
        if not isinstance(theme, pn.theme):
            raise TypeError(
                f"theme must be a plotnine theme object, got {type(theme)}"
            )

    def get_theme(self):
        """Get the current theme object."""
        return self.theme

    def get_io_settings(self):
        """Get the current file I/O settings."""
        return self.file_io_settings.copy()

    def get_colors(self):
        """Get the current color settings as a dictionary."""
        return {
            "primary_color": self.primary_color,
            "secondary_color": self.secondary_color,
            "accent_color": self.accent_color
        }
